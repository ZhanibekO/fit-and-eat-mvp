// Utility functions
function setLoadingMessage(message) {
  const workoutResult = document.getElementById("workoutResult");
  if (!workoutResult) {
    console.error("#workoutResult element not found in the DOM.");
    return;
  }
  workoutResult.innerHTML = `
    <p style="text-align: center; font-size: 1.5rem; color: #34495e;">${message}</p>`;
}

function setErrorMessage(error, section = "workoutResult") {
  const sectionEl = document.getElementById(section);
  if (!sectionEl) {
    console.error(`#${section} element not found.`);
    return;
  }
  sectionEl.innerHTML = `<p style="text-align: center; font-size: 1.2rem; color: red;">${error}</p>`;
  console.error("Error Message Displayed:", error);
}

// Event listener for continuing to details section
document.addEventListener("DOMContentLoaded", function () {
  const continueButton = document.getElementById("continueDetails");

  if (!continueButton) {
    console.error("Button with ID 'continueDetails' not found.");
    return;
  }

  continueButton.addEventListener("click", async function () {
    console.log("Continue button clicked.");

    const userGoals = document.getElementById("userGoals")?.value.trim();
    const warningEl = document.getElementById("goalsWarning");

    // Validate user input
    if (!userGoals) {
      if (warningEl) warningEl.style.display = "block";
      console.warn("User goals input is empty.");
      return;
    }

    if (warningEl) warningEl.style.display = "none";

    const detailsSection = document.getElementById("detailsSection");
    if (!detailsSection) {
      console.error("#detailsSection not found in the DOM.");
      return;
    }

    // Make details section visible
    detailsSection.style.display = "block";
    detailsSection.classList.add("visible");
    console.log("Details section displayed successfully.");

    try {
      const res = await fetch("/submit-goals", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userGoals }),
      });

      const data = await res.json();
      console.log("Server Response:", data);

      if (!data.success) {
        console.warn("Failed to submit user goals:", data.message);
        setErrorMessage("Failed to submit goals. Try again.");
      } else {
        const successMessage = document.getElementById("successMessage");
        if (successMessage) {
          successMessage.textContent = "Your goals were successfully submitted!";
          successMessage.style.display = "block";
          console.log("Goals submitted successfully.");
        }
      }
    } catch (error) {
      console.error("Error submitting user goals to the server:", error);
    }
  });
});

// Show or hide weight goal input based on fitness goals
document.getElementById("fitnessGoal").addEventListener("change", function () {
  const goalInput = document.getElementById("goalWeightInput");
  const selectedGoal = this.value;

  if (selectedGoal === "gainWeight" || selectedGoal === "loseWeight") {
    goalInput.style.display = "block";
    console.log("Weight goal input is now visible.");
  } else {
    goalInput.style.display = "none";
    console.log("Weight goal input is now hidden.");
  }
});

// Workout plan generation
document.getElementById("generateWorkout").addEventListener("click", async function () {
  const workoutResult = document.getElementById("workoutResult");
  setLoadingMessage("Please wait while we generate your custom workout plan...");
  workoutResult.style.display = "block";

  // Field-specific validation logic
  const age = document.getElementById("age")?.value.trim();
  const weight = document.getElementById("weight")?.value.trim();
  const fitnessGoal = document.getElementById("fitnessGoal")?.value.trim();

  if (!age || age <= 0) {
    console.warn("Age is invalid.");
    workoutResult.innerHTML = `
      <p style="text-align: center; color: red;">Age must be a positive number.</p>`;
    return;
  }

  if (!weight || weight <= 0) {
    console.warn("Weight is invalid.");
    workoutResult.innerHTML = `
      <p style="text-align: center; color: red;">Weight must be a positive number.</p>`;
    return;
  }

  if (!fitnessGoal) {
    console.warn("Fitness Goal is missing.");
    workoutResult.innerHTML = `
      <p style="text-align: center; color: red;">Please select a fitness goal.</p>`;
    return;
  }

  const userInput = {
    gender: document.getElementById("gender")?.value,
    age,
    weight,
    weightUnit: document.getElementById("weightUnit")?.value,
    height: document.getElementById("height")?.value,
    heightUnit: document.getElementById("heightUnit")?.value,
    fitnessGoal,
    goalWeight: document.getElementById("goalWeight")?.value,
    workoutType: document.getElementById("workoutType")?.value,
    lifestyle: document.getElementById("userGoals")?.value.trim(),
  };

  console.log("User Input Sent to Server:", userInput);

  try {
    const res = await fetch("/generate-workout", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(userInput),
    });

    const data = await res.json();
    console.log("Server Response:", data);

    if (!res.ok || (data.error && data.error !== null)) {
      setErrorMessage("Error generating workout plan. Please try again.");
      console.error("Server Error:", data.error);
      return;
    }

    // Generate a table layout for the workout plan
    const workoutRows = data.workout
      .split("Day")
      .slice(1)
      .map((day, index) => {
        const [dayHeader, ...exercises] = day.split("\n");
        return `
          <tr>
            <td><strong>Day ${index + 1}:</strong> ${dayHeader.trim()}</td>
            <td>
              <ul>
                ${exercises
                  .filter((exercise) => exercise.trim() !== "")
                  .map((exercise) => `<li>${exercise.trim()}</li>`)
                  .join("")}
              </ul>
            </td>
          </tr>`;
      })
      .join("");

    workoutResult.innerHTML = `
      <h2 style="text-align: center;">Your Personalized Workout Plan</h2>
      <table class="workout-table">
        <thead>
          <tr>
            <th>Day</th>
            <th>Exercises</th>
          </tr>
        </thead>
        <tbody>
          ${workoutRows}
        </tbody>
      </table>
      <div style="text-align: center; margin-top: 20px;">
        <p>Would you like to generate your personal meal plan?</p>
        <button id="generateMealPlan" class="meal-plan-btn">Generate Custom Meal Plan</button>
      </div>`;

    // Add event listener for meal plan generation button
    document.getElementById("generateMealPlan").addEventListener("click", showMealPlanQuestions);
    console.log("Workout plan displayed successfully.");
  } catch (error) {
    console.error("Error Fetching Workout Plan:", error);
    setErrorMessage("Error generating workout plan. Please try again.");
  }
});

// Meal Plan Logic
function showMealPlanQuestions() {
  const workoutResult = document.getElementById("workoutResult");

  // Check if the meal plan form already exists
  if (document.getElementById("mealPlanForm")) {
    return; // Prevent duplicate forms from being added
  }

  // Append the meal plan form below the workout plan
  workoutResult.insertAdjacentHTML(
    "beforeend",
    `
    <div id="mealPlanSection">
      <h2 style="text-align: left; font-size: 1.4rem; color: #2c3e50;">Meal Plan Questions:</h2>
      <div style="background-color: #f9f9f9; padding: 20px; border-radius: 8px;">
        <form id="mealPlanForm">
          <div class="form-group">
            <label for="dietStyle">Diet Style:</label>
            <select id="dietStyle" name="dietStyle" aria-required="true">
              <option value="" disabled selected>Select Diet Style</option>
              <option value="keto">Keto</option>
              <option value="mediterranean">Mediterranean</option>
              <option value="vegan">Vegan</option>
              <option value="vegetarian">Vegetarian</option>
              <option value="general">General</option>
            </select>
          </div>
          <div class="form-group">
            <label for="allergies">Allergies or Dietary Restrictions:</label>
            <select id="allergies" name="allergies" aria-required="true">
              <option value="" disabled selected>Select Allergies</option>
              <option value="none">None</option>
              <option value="gluten">Gluten</option>
              <option value="nuts">Nuts</option>
              <option value="dairy">Dairy</option>
              <option value="shellfish">Shellfish</option>
            </select>
          </div>
          <div class="form-group">
            <label for="lactoseIntolerant">Are You Lactose Intolerant?</label>
            <select id="lactoseIntolerant" name="lactoseIntolerant" aria-required="true">
              <option value="yes">Yes</option>
              <option value="no">No</option>
            </select>
          </div>
          <div class="form-group">
            <label for="additionalComments">Additional Comments:</label>
            <textarea id="additionalComments" name="additionalComments" rows="4" placeholder="Add any additional comments..." aria-required="false"></textarea>
          </div>
          <button id="submitMealPlan" type="button" class="meal-plan-btn">Generate Meal Plan</button>
        </form>
      </div>
    </div>`);
}

// Meal Plan Submission Logic
document.addEventListener("click", async function (event) {
  if (event.target && event.target.id === "submitMealPlan") {
    const mealPreferences = {
      dietStyle: document.getElementById("dietStyle")?.value,
      allergies: document.getElementById("allergies")?.value,
      lactoseIntolerant: document.getElementById("lactoseIntolerant")?.value === "yes",
      additionalComments: document.getElementById("additionalComments")?.value,
    };

    // Validate required fields
    if (!mealPreferences.dietStyle || !mealPreferences.allergies) {
      alert("Please complete all required fields!");
      return;
    }

    console.log("Meal Preferences Sent to Server:", mealPreferences);

    // Disable the submit button to avoid duplicate submissions
    const submitButton = document.getElementById("submitMealPlan");
    submitButton.disabled = true;

    try {
      // API call to generate meal plan
      const res = await fetch("/generate-meal-plan", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(mealPreferences),
      });

      // Check server response status
      if (!res.ok) {
        throw new Error(`Server responded with status ${res.status}: ${res.statusText}`);
      }

      const data = await res.json();

      // Handle server-side errors
      if (data.error) {
        throw new Error(data.error);
      }

      // Parse and display meal plan
      const mealPlanHTML = data.mealPlan
        .split("Day")
        .slice(1) // Remove the first empty split result
        .map((day, index) => {
          const [dayHeader, ...meals] = day.split("\n");
          return `
            <div style="margin-bottom: 15px;">
              <h3 style="text-align: left; font-size: 1.2rem; color: #34495e;">Day ${index + 1}: ${dayHeader.trim()}</h3>
              <ul style="text-align: left; font-size: 1rem; color: #2c3e50; line-height: 1.6; padding-left: 20px;">
                ${meals
                  .filter((meal) => meal.trim() !== "")
                  .map((meal) => `<li>${meal.trim()}</li>`)
                  .join("")}
              </ul>
            </div>`;
        })
        .join("");

      const groceryListHTML = data.groceryList
        ? `<h3 style="text-align: left; font-size: 1.4rem; color: #34495e;">Your Grocery List:</h3>
           <ul style="text-align: left; font-size: 1rem; color: #2c3e50; line-height: 1.6; padding-left: 20px;">
             ${data.groceryList
               .split("\n")
               .filter((item) => item.trim() !== "")
               .map((item) => `<li>${item.trim()}</li>`)
               .join("")}
           </ul>`
        : `<p style="text-align: center; font-size: 1.2rem; color: red;">No grocery list was provided.</p>`;

      // Append meal plan and grocery list to the section
      const mealPlanSection = document.getElementById("mealPlanSection");
      mealPlanSection.innerHTML += `
        <h2 style="text-align: left; font-size: 1.4rem; color: #2c3e50;">Your Meal Plan:</h2>
        <div style="background-color: #f4f7fc; padding: 20px; border-radius: 8px;">
          ${mealPlanHTML}
          ${groceryListHTML}
        </div>`;
      console.log("Meal plan displayed successfully.");
    } catch (error) {
      console.error("Error Fetching Meal Plan:", error);

      // Display error message dynamically
      const mealPlanSection = document.getElementById("mealPlanSection");
      if (mealPlanSection) {
        mealPlanSection.insertAdjacentHTML(
          "beforeend",
          `<p id="mealPlanError" style="color: red; text-align: center; font-size: 1.2rem;">Error generating meal plan. Please try again.</p>`
        );
      }
    } finally {
      // Re-enable the submit button
      submitButton.disabled = false;
    }
  }
});

// Debug Initialization
console.log("JavaScript file loaded successfully.");
console.log("Event listeners initialized.");
