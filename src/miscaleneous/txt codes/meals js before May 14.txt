const express = require("express");
const fetch = require("node-fetch");
const router = express.Router();

// Access API key from environment variables
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
if (!OPENAI_API_KEY) {
  console.error("API Key is missing in meals.js. Please check your .env file.");
  process.exit(1);
}

/*
Helper functions to calculate nutrition based on the Mifflin-St Jeor equation.
*/

// Calculate TDEE based on gender, weight (kg), height (cm), age, and activity level.
function calculateTDEE(gender, weight, height, age, activityLevel) {
  let BMR;
  if (gender.toLowerCase() === "male") {
    BMR = (10 * weight) + (6.25 * height) - (5 * age) + 5;
  } else {
    BMR = (10 * weight) + (6.25 * height) - (5 * age) - 161;
  }
  
  let activityFactor;
  switch (activityLevel.toLowerCase()) {
    case "sedentary":
      activityFactor = 1.2;
      break;
    case "moderately active":
      activityFactor = 1.55;
      break;
    case "very active":
      activityFactor = 1.725;
      break;
    default:
      activityFactor = 1.2;
  }
  
  return Math.round(BMR * activityFactor);
}

// Adjust calories based on fitness goal (reduce for weight loss, increase for muscle gain)
function adjustCaloriesForGoal(tdee, fitnessGoal) {
  if (fitnessGoal === "loseWeight") {
    return Math.round(tdee * 0.85);
  } else if (fitnessGoal === "gainMuscle") {
    return Math.round(tdee * 1.10);
  }
  return tdee;
}

// Calculate macronutrient targets using a 30/40/30 split (Protein/Carbs/Fat)
function calculateMacros(calories) {
  const proteinCalories = calories * 0.30;
  const carbsCalories = calories * 0.40;
  const fatCalories = calories * 0.30;
  return {
    protein: Math.round(proteinCalories / 4),  // 4 kcal per gram protein
    carbs: Math.round(carbsCalories / 4),        // 4 kcal per gram carb
    fat: Math.round(fatCalories / 9)             // 9 kcal per gram fat
  };
}

/*
Meal Plan Prompt Documentation:
The API prompt will now ask OpenAI to generate a fully structured meal plan in JSON.
*/

// Define the POST route for generating meal plans.
router.post("/generate-meal-plan", async (req, res) => {
  // Extract meal plan fields.
  const { dietStyle, allergies, lactoseIntolerant, additionalComments, mealPlanOption, pantryItems } = req.body;
  console.log("Received Meal Preferences (meals.js):", {
    dietStyle,
    allergies,
    lactoseIntolerant,
    additionalComments,
    mealPlanOption,
    pantryItems,
  });
  if (!dietStyle || !allergies) {
    return res.status(400).json({ error: "Missing required fields for meal plan generation." });
  }
  
  // Extract user's profile data – assumed to come as req.body.profile.
  const { gender, weight, height, age, activityLevel, fitnessGoal } = req.body.profile || {};
  let nutritionSummaryMessage = "";
  if (gender && weight && height && age && activityLevel && fitnessGoal) {
    const tdee = calculateTDEE(gender, parseFloat(weight), parseFloat(height), parseFloat(age), activityLevel);
    const adjustedCalories = adjustCaloriesForGoal(tdee, fitnessGoal);
    const macros = calculateMacros(adjustedCalories);
    const goalText = fitnessGoal === "loseWeight" 
      ? "weight loss" 
      : (fitnessGoal === "gainMuscle" ? "muscle gain" : "overall fitness");
    nutritionSummaryMessage = `Based on your fitness goals, your daily target is approximately ${adjustedCalories} calories per day. This includes around ${macros.protein}g protein, ${macros.carbs}g carbohydrates, and ${macros.fat}g fat to fuel your workouts and support ${goalText}. Enjoy balanced meals and nutritious snacks throughout the day.`;
  } else {
    nutritionSummaryMessage = "Based on your fitness goals, this personalized high‑protein meal plan is designed to provide approximately 1650 calories per day, including around 125g protein, 150g carbohydrates, and 50g fat.";
  }
  
  // Build a structured prompt that instructs the AI to output a fully structured JSON object.
  const mealPlanPrompt = `Generate a personalized weekly meal plan based on the following details:
- Dietary Preferences: ${dietStyle || "General"}
- Allergies: ${allergies || "None"}
- Lactose Intolerant: ${lactoseIntolerant ? "Yes" : "No"}
- Additional Comments: ${additionalComments || "No additional comments provided"}
- Meal Plan Option: ${mealPlanOption || "new"}
- Pantry Inventory: ${pantryItems || "none"}

${nutritionSummaryMessage}

Return your answer as a JSON object with the following keys:
{
  "mealPlan": {
      "Monday": {
          "meals": [
              { "title": "Breakfast", "recipe": "<Detailed recipe with ingredients, instructions, prep time, and macro breakdown>" },
              { "title": "Lunch", "recipe": "<Detailed recipe...>" },
              { "title": "Dinner", "recipe": "<Detailed recipe...>" },
              { "title": "Snacks", "recipe": "<Detailed recipe...>" }
          ],
          "dailyMacros": "<Summary of total daily macros>"
      },
      "Tuesday": { ... },
      ...,
      "Saturday": { ... },
      "Sunday": "Rest Day"
  },
  "groceryList": {
      "Protein Sources": ["<ingredient and amount>", "..."],
      "Grains & Carbs": ["..."],
      "Vegetables": ["..."],
      "Fruits": ["..."],
      "Healthy Fats & Extras": ["..."],
      "Seasonings & Pantry Staples": ["..."]
  }
}
Do not include any additional text outside of a valid JSON structure.`;
  
  try {
    console.log("Meal Plan Prompt Sent to OpenAI (meals.js):", mealPlanPrompt);

    const aiResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: mealPlanPrompt }],
        temperature: 0.3,
        max_tokens: 2500
      }),
    });
    
    const data = await aiResponse.json();
    console.log("Full OpenAI Response (meals.js):", JSON.stringify(data, null, 2));
    
    // Expecting a structured JSON answer; parse its content.
    let mealPlanResponse = data.choices?.[0]?.message?.content?.trim() || null;
    console.log("Raw mealPlanResponse:", mealPlanResponse);
    if (!mealPlanResponse) {
      console.error("Meal plan generation failed.");
      return res.status(500).json({ mealPlan: null, groceryList: null, error: "Meal plan is empty. Please try again." });
    }
    
    let structuredMealPlan;
    try {
      // Remove code fences if present.
      if (mealPlanResponse.startsWith("```")) {
        mealPlanResponse = mealPlanResponse.replace(/```/g, "");
      }
      mealPlanResponse = mealPlanResponse.trim();
      structuredMealPlan = JSON.parse(mealPlanResponse);
    } catch (e) {
      console.error("Error parsing meal plan JSON:", e);
      try {
        // Attempt additional repair by replacing newline characters with spaces.
        let repairedResponse = mealPlanResponse.replace(/\r?\n|\r/g, " ");
        structuredMealPlan = JSON.parse(repairedResponse);
      } catch (e2) {
        console.error("Error parsing meal plan JSON after repair:", e2);
        return res.status(500).json({ mealPlan: null, groceryList: null, error: "Invalid meal plan format received from server." });
      }
    }
    
    // Respond with the structured meal plan.
    res.json({ mealPlan: structuredMealPlan.mealPlan, groceryList: structuredMealPlan.groceryList, error: null });
  } catch (error) {
    console.error("Server Error Generating Meal Plan (meals.js):", error);
    res.status(500).json({ mealPlan: null, groceryList: null, error: "Failed to generate meal plan. Server-side error." });
  }
});

module.exports = router;