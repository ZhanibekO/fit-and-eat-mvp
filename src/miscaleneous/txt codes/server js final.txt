// Load environment variables from the .env file
require("dotenv").config();

// Import dependencies
const express = require("express");
const fetch = require("node-fetch");
const app = express();

// Access your API key from .env
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
if (!OPENAI_API_KEY) {
  console.error("API Key is missing. Please check your .env file.");
  process.exit(1);
}

// Middleware to parse JSON requests
app.use(express.json());

// Serve static files from the "public" folder
app.use(express.static("public"));

// ----------------------------
// Generate workout plan endpoint
// ----------------------------
app.post("/generate-workout", async (req, res) => {
  const { gender, age, weight, weightUnit, height, heightUnit, fitnessGoal, goalWeight, workoutType } = req.body;

  const workoutPrompt = `Generate a personalized workout plan based on the following details:
    - Gender: ${gender || "not provided"}
    - Age: ${age || "not provided"}
    - Weight: ${weight || "not provided"} ${weightUnit || ""}
    - Height: ${height || "not provided"} ${heightUnit || ""}
    - Fitness Goal: ${fitnessGoal || "not provided"}
    - Weight Goal: ${goalWeight || "not specified"}
    - Workout Type: ${workoutType || "not specified"}
Ensure the plan includes daily routines with clear instructions for each exercise.`;

  try {
    console.log("Workout Prompt Sent to OpenAI:", workoutPrompt);
    const aiResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: workoutPrompt }],
        temperature: 0.7,
        max_tokens: 768,
      }),
    });

    const responseText = await aiResponse.text();
    console.log("Raw API Response:", responseText);

    try {
      const data = JSON.parse(responseText);
      const workout = data.choices?.[0]?.message?.content?.trim() || "No workout plan could be generated.";
      console.log("Generated Workout Plan:", workout);

      if (!workout.trim()) {
        console.error("Workout plan generation failed.");
        return res.status(500).json({ workout: null, error: "Workout plan is empty. Please try again." });
      }

      res.json({ workout, error: null });
    } catch (error) {
      console.error("Error parsing API response:", error);
      res.status(500).json({ workout: null, error: "Failed to parse response from OpenAI." });
    }
  } catch (error) {
    console.error("Server Error Generating Workout:", error);
    res.status(500).json({ workout: null, error: "Failed to generate workout. Server-side error." });
  }
});

// ----------------------------
// Generate meal plan endpoint
// ----------------------------
app.post("/generate-meal-plan", async (req, res) => {
  const { dietStyle, allergies, lactoseIntolerant, additionalComments } = req.body;

  console.log("Received Meal Preferences:", { dietStyle, allergies, lactoseIntolerant, additionalComments });

  if (!dietStyle || !allergies) {
    return res.status(400).json({ error: "Missing required fields for meal plan generation." });
  }

  /* 
    Updated Meal Plan Prompt:

    Generate a personalized weekly meal plan based on the following details:
    - Dietary Preferences: ${dietStyle || "General"}
    - Allergies: ${allergies || "None"}
    - Lactose Intolerant: ${lactoseIntolerant ? "Yes" : "No"}
    - Additional Comments: ${additionalComments || "No additional comments provided"}
    
    PLEASE RETURN YOUR RESPONSE IN EXACTLY TWO SECTIONS:
    Section 1: "Meal Plan:"  
          Create a full-width table (as text) with three columns (Day | Meals (click for recipe) | Macros). Include 8 rows (1 header row plus one row per day: Monday to Sunday).
          For each day, list the meals (e.g., Breakfast, Lunch, Dinner, Snacks). For each meal, output a short title (without quantity details) and include, either in parentheses or on a new line, the complete recipe details (with detailed ingredients and instructions, prep time, tips, and macros).
          Also include a total macro summary line for the day.
    Section 2: "Grocery List:"  
          Return a list of all required ingredients for the weekly meal plan—one per line—with exact measurements (e.g., "500 g Oats", "1.5 lbs Chicken breast").
          Ensure this section starts on a new line with exactly the text "Grocery List:".
  */

  const mealPlanPrompt = `Generate a personalized weekly meal plan based on the following details:
- Dietary Preferences: ${dietStyle || "General"}
- Allergies: ${allergies || "None"}
- Lactose Intolerant: ${lactoseIntolerant ? "Yes" : "No"}
- Additional Comments: ${additionalComments || "No additional comments provided"}

PLEASE RETURN YOUR RESPONSE IN EXACTLY TWO SECTIONS.

Section 1: "Meal Plan:"  
Create a full-width table (as text) with three columns (Day | Meals (click for recipe) | Macros). Include 8 rows (1 header row plus one row for each day, Monday to Sunday).
For each day, list the meals for that day (e.g., Breakfast, Lunch, Dinner, Snacks).
For each meal, output a short meal title for display (without any quantity details) and then include, either in parentheses or on a new line, complete recipe details (detailed ingredients with exact amounts, step-by-step instructions, prep time, tips, and macros).
After listing each meal's macros, include a total macro summary for the day.

Section 2: "Grocery List:"  
Return a list of all required ingredients for the weekly meal plan—one per line.
For each ingredient, include an exact measurement (e.g., "500 g Oats", "1.5 lbs Chicken breast").
Ensure this section starts on a new line with exactly the text "Grocery List:".
`;

  try {
    console.log("Meal Plan Prompt Sent to OpenAI (meals.js):", mealPlanPrompt);

    const aiResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: mealPlanPrompt }],
        temperature: 0.3,
        max_tokens: 2000,
      }),
    });

    const data = await aiResponse.json();
    console.log("Full OpenAI Response (meals.js):", JSON.stringify(data, null, 2));
    const mealPlan = data.choices?.[0]?.message?.content?.trim() || null;
    console.log("Extracted Meal Plan (meals.js):", mealPlan);

    let groceryList = null;
    if (mealPlan) {
      const match = mealPlan.match(/Grocery List:\s*([\s\S]*)/i);
      if (match && match[1]) {
        groceryList = match[1].trim();
      }
    }
    console.log("Extracted Grocery List (meals.js):", groceryList || "No grocery list provided.");

    if (!mealPlan) {
      console.error("Meal plan generation failed (meals.js).");
      return res.status(500).json({ mealPlan: null, groceryList: null, error: "Meal plan is empty. Please try again." });
    }
    
    res.json({ mealPlan, groceryList, error: null });
  } catch (error) {
    console.error("Server Error Generating Meal Plan (meals.js):", error);
    res.status(500).json({ mealPlan: null, groceryList: null, error: "Failed to generate meal plan. Server-side error." });
  }
});

// ----------------------------
// Submit goals endpoint
// ----------------------------
app.post("/submit-goals", (req, res) => {
  const { userGoals } = req.body;

  if (!userGoals) {
    console.error("User goals not provided.");
    return res.status(400).json({ success: false, message: "User goals are required." });
  }

  console.log("User goals received:", userGoals);
  res.status(200).json({ success: true, message: "Goals submitted successfully." });
});

// ----------------------------
// Catch-all for invalid routes
// ----------------------------
app.use((req, res) => {
  res.status(404).json({ error: "Endpoint not found" });
});

// ----------------------------
// Start server
// ----------------------------
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});