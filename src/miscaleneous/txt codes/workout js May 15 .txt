// workout.js

// Load environment variables from the .env file
require("dotenv").config();

const express = require("express");
const fetch = require("node-fetch");
const router = express.Router();

// Ensure OPENAI_API_KEY is defined.
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
if (!OPENAI_API_KEY) {
  console.error("Error: OPENAI_API_KEY is not defined. Please set it in your .env file.");
  process.exit(1);
}

/* ===================== */
/* HELPER FUNCTIONS      */
/* ===================== */
function compressHTML(html) {
  return html.replace(/\n/g, "").replace(/>\s+</g, "><").trim();
}

function balanceBraces(text) {
  const openCount = (text.match(/{/g) || []).length;
  const closeCount = (text.match(/}/g) || []).length;
  if (openCount > closeCount) {
    console.warn(`Balancing braces: adding ${openCount - closeCount} missing '}'`);
    text += "}".repeat(openCount - closeCount);
  }
  return text;
}

// Helper to format long instruction strings into separate lines.
function formatText(text) {
  if (!text) return "";
  return text.replace(/\. /g, ".<br>");
}

// Helper to format an exercise—ensuring "Primary muscles worked:" is bold and on a new line.
function formatExercise(ex) {
  if (!ex) return "";
  return ex.replace(/Primary muscles worked:/gi, "<br><strong>Primary muscles worked:</strong> ");
}

/* ===================== */
/* ROUTE: Generate Workout Plan */
/* ===================== */
router.post("/generate-workout", async (req, res) => {
  // Destructure user input from the request body.
  const {
    fitnessGoal,
    workoutType,
    fitnessLevel,
    timeCommitment,
    equipment,
    specificGoals,
    lifestyle,
  } = req.body;

  // For ease of reference.
  const userProfileData = req.body;

  // Build a dynamic prompt that instructs the AI to output detailed instructions for each day.
  let dynamicPrompt = `Generate a highly detailed 7-day workout plan for weight loss tailored for a general adult user with the following criteria:
Fitness Goal: ${fitnessGoal}.
Workout Type: ${workoutType}.
Fitness Level: ${fitnessLevel}.
Time Commitment per Session: ${timeCommitment}.
`;
  if (equipment && equipment.length > 0) {
    dynamicPrompt += `Available Equipment: ${equipment.join(", ")}.
`;
  } else {
    dynamicPrompt += `Available Equipment: None.
`;
  }
  dynamicPrompt += `Specific Fitness Goals: ${specificGoals ? specificGoals : "None"}.
Lifestyle: ${lifestyle ? lifestyle : "General adult"}.`;

  dynamicPrompt += `
Please generate a personalized workout plan that is clear, safe, and easy to follow. **Important Formatting Instructions:**
- Each section title (for example, <strong>Warm-Up (5 minutes)</strong>, <strong>Main Circuit (2 circuits)</strong>, <strong>Rest &amp; Cool-Down</strong>, and <strong>Cool-Down</strong>) must be wrapped in HTML <strong> tags.
- For every exercise in the main circuit, output the exercise name in <strong> tags. Immediately following the instructions for proper form, add a new line containing <strong>Primary muscles worked:</strong> followed directly by the muscle names (do not use markdown stars).
- Also output key instructions such as <strong>Perform each exercise with proper form and focus on engaging the targeted muscles.</strong>, <strong>Take deep breaths and stretch to help your muscles recover and prevent injury.</strong>, and <strong>Focus on your breathing and relax your muscles to aid in recovery.</strong> using <strong> tags.
- For Sunday, output exactly: <strong>Rest Day:</strong> Take a 10-15 minute light walk, perform a gentle yoga sequence, foam rolling, and dynamic stretching. Briefly explain how each activity aids recovery. Do not output "undefined" for Sunday.

Now, follow these specific guidelines based on workoutType and time commitment:
`;

  // Add instructions conditionally based on workout type.
  if (workoutType.toLowerCase() === "home" || workoutType.toLowerCase() === "bodyweight") {
    dynamicPrompt += `
For a bodyweight/home workout (Tabata-style), follow these guidelines:

1. IF the time commitment is "10-20 minutes":
   - <strong>Warm-Up (3 minutes):</strong> Provide 2-3 dynamic warm-up exercises (e.g., 30 seconds each of light cardio and dynamic stretches). Explain briefly which muscles are activated.
   - <strong>Main Circuit (1 circuit):</strong> Create 2-3 simple exercises. For each, list the exercise name (in <strong> tags), provide detailed form instructions, and on a new line include <strong>Primary muscles worked:</strong> followed by the targeted muscles. Each exercise should be performed for 30 seconds.
   - <strong>Rest &amp; Cool-Down:</strong> Include a 1-minute active recovery (deep breathing/light stretching) and a 3-minute cool-down with 2-3 static stretches. Explain the recovery benefits.
   - Include a safety notice advising users to start slowly and consult a professional if any pain occurs.

2. IF the time commitment is "20-30 minutes":
   - <strong>Warm-Up (4 minutes):</strong> Provide 3-4 dynamic exercises with brief benefits noted.
   - <strong>Main Circuit (1 circuit):</strong> Specify 3-4 exercises, each for around 40-45 seconds, with detailed instructions and a new line with <strong>Primary muscles worked:</strong> followed by muscle names.
   - <strong>Rest &amp; Cool-Down:</strong> Insert a 1-minute recovery period and a 4-minute cool-down with detailed stretching.
   - Add a motivational tip such as <strong>Stay focused—progress takes time.</strong>

3. IF the time commitment is "30-45 minutes":
   - <strong>Warm-Up (5 minutes):</strong> Include a variety of dynamic movements (e.g., high knees, leg swings) with brief explanations.
   - <strong>Main Circuit (2 circuits):</strong> Each circuit should have 3-4 exercises performed for 30-40 seconds each, with clear instructions and a new line with <strong>Primary muscles worked:</strong> for each exercise.
   - <strong>Rest &amp; Cool-Down:</strong> Insert a 1-minute rest after each circuit and conclude with a 5-minute cool-down that details each stretch.
   - Suggest progressive guidance for users to gradually increase duration or number of circuits.
   - Provide safety and modification tips for beginners, and optionally intensify for advanced users.

4. IF the time commitment is "45-60 minutes":
   - <strong>Warm-Up (6 minutes):</strong> Provide an extended warm-up with a broad range of dynamic exercises and brief benefits for each.
   - <strong>Main Circuit (3 circuits):</strong> Provide 3 circuits, each with 3-4 exercises performed for 45 seconds to 1 minute each. For each exercise, include detailed instructions and a new line with <strong>Primary muscles worked:</strong> followed by the applicable muscles. Allow for a 1-minute recovery between circuits with additional recovery ideas.
   - <strong>Rest &amp; Cool-Down:</strong> End with a 6-minute cool-down focusing on mobility and flexibility.
   - Encourage progressive overload and include optional modifications for advanced users.
   - Add a motivational note such as <strong>Great job today! Every workout brings you closer to your goals.</strong>

`;
  } else if (workoutType.toLowerCase() === "gym") {
    dynamicPrompt += `
For a gym workout routine, follow these guidelines:

1. IF the time commitment is "10-20 minutes":
   - <strong>Warm-Up (3 minutes):</strong> Provide a quick warm-up with dynamic stretches and light cardio (e.g., treadmill walking, elliptical). Briefly explain the target muscles.
   - <strong>Main Circuit (1 circuit):</strong> Generate 2-3 gym-based exercises (e.g., dumbbell presses, cable rows) with a reps/sets format (e.g., 2 sets of 8-10 reps). For each exercise, include the exercise name (in <strong> tags), detailed form instructions, and on a new line output <strong>Primary muscles worked:</strong> followed by the muscles targeted.
   - <strong>Rest &amp; Cool-Down:</strong> Include a 1-minute rest between circuits and a 3-minute cool-down incorporating static stretches.
   - Emphasize proper form and recommend lighter weights for beginners.

2. IF the time commitment is "20-30 minutes":
   - <strong>Warm-Up (4 minutes):</strong> Include dynamic warm-up exercises focused on gym movements.
   - <strong>Main Circuit (1 circuit):</strong> Provide 3-4 gym exercises with a rep/set scheme (e.g., 3 sets of 10-12 reps). Include detailed instructions and a new line with <strong>Primary muscles worked:</strong> for each exercise.
   - <strong>Rest &amp; Cool-Down:</strong> Offer a 1-2 minute recovery period and a 4-minute cool-down focusing on the key muscle groups used.
   - Add a motivational tip such as <strong>Push through with proper form—consistency is key.</strong>

3. IF the time commitment is "30-45 minutes":
   - <strong>Warm-Up (5 minutes):</strong> Offer a thorough warm-up with gym-specific dynamic movements.
   - <strong>Main Circuit (2 circuits):</strong> Provide 3-4 gym exercises per circuit using a rep/set format (e.g., 3 sets of 12 reps). Include detailed instructions and on a new line output <strong>Primary muscles worked:</strong> for each exercise.
   - <strong>Rest &amp; Cool-Down:</strong> Suggest a 1-2 minute active recovery between circuits and a 5-minute cool-down detailing each stretch.
   - Provide progressive guidance for gradual weight increases and modifications based on the user's fitness level.

4. IF the time commitment is "45-60 minutes":
   - <strong>Warm-Up (6 minutes):</strong> Provide an extended warm-up suitable for intensive gym sessions.
   - <strong>Main Circuit (3 circuits):</strong> Create 3 circuits with 3-4 exercises each, using a rep/set format (e.g., 3 sets of 12-15 reps). For each exercise include the exercise name (in <strong> tags), step-by-step instructions, and a new line with <strong>Primary muscles worked:</strong> followed by the specific muscle groups.
   - <strong>Rest &amp; Cool-Down:</strong> Recommend 1-2 minute rest periods (with suggestions like foam rolling or controlled breathing), followed by a 6-minute cool-down stretching session.
   - Encourage progressive overload and provide clear modifications for beginners.
   - End with a motivational and recovery note such as <strong>Excellent work! Remember, proper recovery is as important as the workout itself.</strong>

`;
  }

  // End the prompt by specifying output format.
  dynamicPrompt += `
Return ONLY a valid JSON object EXACTLY in the following format, with no extra text or markdown:
{
  "Monday": {
    "warmUp": "<Your warm-up instructions with <br> for line breaks>",
    "mainCircuit": "<Your main circuit instructions with detailed exercise steps>",
    "rest": "<Your rest and recovery instructions>",
    "coolDown": "<Your cool-down instructions>"
  },
  "Tuesday": { ... },
  "Wednesday": { ... },
  "Thursday": { ... },
  "Friday": { ... },
  "Saturday": { ... },
  "Sunday": "<strong>Rest Day:</strong> Take a 10-15 minute light walk, perform a gentle yoga sequence, foam rolling, and dynamic stretching. Briefly explain how each activity aids recovery."
}
OUTPUT_END
`;

  console.log("Dynamic Workout Prompt Sent to OpenAI:", dynamicPrompt);

  try {
    const aiResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: dynamicPrompt }],
        temperature: 0.4,
        max_tokens: 2500,
        stop: ["OUTPUT_END"]
      })
    });
    const apiResult = await aiResponse.json();
    console.log("Raw API JSON Response:", JSON.stringify(apiResult, null, 2));
    if (!apiResult.choices || !apiResult.choices[0] || !apiResult.choices[0].message) {
      return res.status(500).json({ workout: null, error: "Unexpected API response format." });
    }
    if (apiResult.choices[0].finish_reason === "length") {
      console.warn("API response was truncated due to token limits.");
      return res.status(500).json({ workout: null, error: "Workout output truncated. Please try again with a shorter prompt." });
    }
    
    let workoutText = apiResult.choices[0].message.content.trim();
    console.log("Raw workoutText received:", workoutText);
    
    // Remove markdown code fences if present.
    if (workoutText.startsWith("```")) {
      workoutText = workoutText.replace(/^```(json)?\s*/i, "").replace(/\s*```$/, "").trim();
      console.log("WorkoutText after removing markdown delimiters:", workoutText);
    }
    
    // Trim extraneous text before and after the JSON block.
    const firstBrace = workoutText.indexOf("{");
    if (firstBrace > 0) {
      workoutText = workoutText.substring(firstBrace);
      console.log("WorkoutText after trimming extra text before JSON:", workoutText);
    }
    const lastBrace = workoutText.lastIndexOf("}");
    if (lastBrace < workoutText.length - 1) {
      workoutText = workoutText.substring(0, lastBrace + 1);
      console.log("WorkoutText after trimming extra text after JSON:", workoutText);
    }
    
    // Remove the OUTPUT_END marker if present.
    workoutText = workoutText.replace(/OUTPUT_END\s*$/i, "").trim();
    
    // Use regex to extract a JSON block.
    const jsonMatch = workoutText.match(/{[\s\S]*}/);
    if (!jsonMatch) {
      console.error("Regex failed to extract JSON. Full workoutText:", workoutText);
      return res.status(500).json({ workout: null, error: "Invalid workout format received from server." });
    }
    workoutText = jsonMatch[0];
    console.log("Extracted JSON using regex:", workoutText);
    
    // Cleanup: remove BOM, fix trailing commas, and balance braces.
    workoutText = workoutText.replace(/^\uFEFF/, "").trim();
    workoutText = workoutText.replace(/,(\s*})/g, "$1");
    if (workoutText.slice(-1) !== "}") {
      workoutText += "}";
      console.log("Appended missing closing brace. New workoutText:", workoutText);
    }
    workoutText = balanceBraces(workoutText);
    console.log("Cleaned workoutText after balancing, first 50 chars:", workoutText.slice(0, 50), "...", "last 50 chars:", workoutText.slice(-50));
    
    let workoutPlan;
    try {
      workoutPlan = JSON.parse(workoutText);
      console.log("Parsed workoutPlan object:", workoutPlan);
    } catch (e) {
      console.error("Error parsing workout JSON:", e);
      return res.status(500).json({ workout: null, error: "Invalid workout format received from server." });
    }
    
    // Build an HTML table to display the 7-day workout plan.
    let tableRows = "";
    const dayNames = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
    dayNames.forEach(day => {
      let dayContent = "";
      if (workoutPlan[day] && typeof workoutPlan[day] === "object") {
        dayContent += workoutPlan[day].warmUp + "<br><br>";
        dayContent += workoutPlan[day].mainCircuit + "<br><br>";
        dayContent += workoutPlan[day].rest + "<br><br>";
        dayContent += workoutPlan[day].coolDown;
      } else if (workoutPlan[day]) {
        dayContent = workoutPlan[day];
      } else {
        dayContent = "No workout data.";
      }
      tableRows += `<tr>
        <td style="padding:8px; border:1px solid #ccc;">${day}</td>
        <td style="padding:8px; border:1px solid #ccc;">${dayContent}</td>
      </tr>`;
    });
    
    // Updated header, footer, and meal plan button in final output.
    const tableHTML = compressHTML(`
      <div class="workout-heading"><strong>Your 7-day Workout Plan for Weight Loss</strong></div>
      <table style="width:100%; border-collapse: collapse;">
        <thead>
          <tr>
            <th style="padding:8px; border:1px solid #ccc;">Day</th>
            <th style="padding:8px; border:1px solid #ccc;">Plan</th>
          </tr>
        </thead>
        <tbody>
          ${tableRows}
        </tbody>
      </table>
      <div class="workout-footer"><strong>Remember: Your progress depends on both effective workouts and proper nutrition. Would you like to generate a personalized meal plan to fuel your success?</strong></div>
      <div style="text-align:center; margin:20px 0;">
        <button id="generateMealPlan" class="meal-plan-btn">Generate Meal Plan</button>
      </div>
    `);
    console.log("Final HTML being sent to the client:", tableHTML);
    
    // Build the extra guidance block only once.
    let extraGuidance = `<div class="extra-guidance">`;
    extraGuidance += `<p><strong>Workout Tip:</strong> For maximum benefit, perform the main circuit <strong>2 times</strong>. Beginners can start with one circuit and progress gradually.</p>`;
    let typeLower = userProfileData.workoutType.toLowerCase();
    if (typeLower === "home" || typeLower === "bodyweight") {
      extraGuidance += `<p><strong>Home/Bodyweight Workouts:</strong> This plan is designed as a Tabata-style, time-based workout. Focus on intensity and correct form using your bodyweight or available equipment.</p>`;
    } else if (typeLower === "gym") {
      extraGuidance += `<p><strong>Gym Workouts:</strong> This plan is structured with reps and sets. Focus on proper form and progression using the provided rep/set scheme and ensure adequate rest between circuits.</p>`;
    }
    if (userProfileData.timeCommitment) {
      let commitment = userProfileData.timeCommitment;
      extraGuidance += `<p><strong>Session Duration &amp; Frequency:</strong> You selected ${commitment}. `;
      if (commitment.includes("10-20")) {
        extraGuidance += `We recommend 1 circuit as detailed above.`;
      } else if (commitment.includes("20-30")) {
        extraGuidance += `Aim for 1 circuit with slightly longer exercise durations.`;
      } else if (commitment.includes("30-45")) {
        extraGuidance += `This plan includes 2 circuits for a balanced workout.`;
      } else if (commitment.includes("45-60")) {
        extraGuidance += `With more available time, 3 circuits will deliver excellent results.`;
      }
      extraGuidance += `</p>`;
    }
    if (userProfileData.fitnessLevel) {
      let level = userProfileData.fitnessLevel.toLowerCase();
      if (level === "beginner") {
        extraGuidance += `<p><strong>Intensity:</strong> As a beginner, expect moderate intensity with simpler exercise variations.</p>`;
      } else if (level === "intermediate") {
        extraGuidance += `<p><strong>Intensity:</strong> Your workouts will be moderately challenging. You can push a bit harder as you build consistency.</p>`;
      } else if (level === "advanced") {
        extraGuidance += `<p><strong>Intensity:</strong> High intensity is incorporated to push your limits while emphasizing proper form to avoid injury.</p>`;
      }
    }
    if (userProfileData.equipment && userProfileData.equipment.length > 0) {
      extraGuidance += `<p><strong>Equipment Note:</strong> You selected: ${userProfileData.equipment.join(", ")}. Use these tools to further customize your routine.</p>`;
    } else {
      extraGuidance += `<p><strong>Home Workout Advantage:</strong> This plan emphasizes effective bodyweight exercises that require no additional equipment.</p>`;
    }
    if (userProfileData.fitnessGoal) {
      extraGuidance += `<p><strong>Your Goal:</strong> This plan is tailored to help you ${userProfileData.fitnessGoal}. Consistency and safety are key to progress.</p>`;
    }
    extraGuidance += `</div>`;
    
    // Prepend the extra guidance block above the table.
    res.json({ workout: extraGuidance + tableHTML, error: null });
  } catch (error) {
    console.error("Error Fetching Workout Plan:", error);
    res.status(500).json({ workout: null, error: "Failed to generate workout. Server-side error." });
  }
});

module.exports = router;