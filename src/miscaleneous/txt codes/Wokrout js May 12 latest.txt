// workout.js

// Load environment variables from the .env file
require("dotenv").config();

const express = require("express");
const fetch = require("node-fetch");
const router = express.Router();

// Ensure OPENAI_API_KEY is defined.
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
if (!OPENAI_API_KEY) {
  console.error("Error: OPENAI_API_KEY is not defined. Please set it in your .env file.");
  process.exit(1);
}

/* ===================== */
/* HELPER FUNCTIONS      */
/* ===================== */
function compressHTML(html) {
  return html.replace(/\n/g, "").replace(/>\s+</g, "><").trim();
}

function balanceBraces(text) {
  const openCount = (text.match(/{/g) || []).length;
  const closeCount = (text.match(/}/g) || []).length;
  if (openCount > closeCount) {
    console.warn(`Balancing braces: adding ${openCount - closeCount} missing '}'`);
    text += "}".repeat(openCount - closeCount);
  }
  return text;
}

// Helper to format long instruction strings into separate lines.
function formatText(text) {
  if (!text) return "";
  // Replace periods followed by a space with a period and a <br> tag.
  return text.replace(/\. /g, ".<br>");
}

// Helper to format an exercise—ensuring "Primary muscles worked:" is bold and on a new line.
function formatExercise(ex) {
  if (!ex) return "";
  // Insert a line break and wrap in <strong> when "Primary muscles worked:" appears.
  return ex.replace(/Primary muscles worked:/gi, "<br><strong>Primary muscles worked:</strong> ");
}

/* ===================== */
/* ROUTE: Generate Workout Plan */
/* ===================== */
router.post("/generate-workout", async (req, res) => {
  // Destructure user input from the request body.
  const {
    fitnessGoal,
    workoutType,
    fitnessLevel,
    timeCommitment,
    equipment,
    specificGoals,
    lifestyle,
  } = req.body;

  // For ease of reference.
  const userProfileData = req.body;

  // Build a dynamic prompt that instructs the AI to output detailed instructions for each day.
  let dynamicPrompt = `Generate a highly detailed 7-day workout plan for weight loss tailored for a general adult user with the following criteria:
Fitness Goal: ${fitnessGoal}.
Workout Type: ${workoutType}.
Fitness Level: ${fitnessLevel}.
Time Commitment per Session: ${timeCommitment}.
`;
  if (equipment && equipment.length > 0) {
    dynamicPrompt += `Available Equipment: ${equipment.join(", ")}.
`;
  } else {
    dynamicPrompt += `Available Equipment: None.
`;
  }
  dynamicPrompt += `Specific Fitness Goals: ${specificGoals ? specificGoals : "None"}.
Lifestyle: ${lifestyle ? lifestyle : "General adult"}.
  
For each day (Monday to Saturday), provide the following sections:
1. **Warm-Up:**  
 - Provide a 5-minute dynamic warm-up routine. List 3–4 exercises (e.g., jumping jacks, high knees, arm circles, leg swings), with durations or set counts.  
 - For each exercise, mention which muscles (e.g., legs, core, shoulders) are being prepared, and briefly explain why.
  
2. **Main Circuit:**  
 - Provide a list of 3–4 exercises.  
 - If the workout type is “home” or “bodyweight”, design the circuit as a time-based (Tabata-style) routine (e.g., 30 seconds per exercise).  
 - If the workout type is “gym”, use a reps/sets method (e.g., 3 sets of 12 reps).  
 - For each exercise, include:
  • The exercise name  
  • Detailed instructions on proper form on the same line  
  • A new line stating in bold “Primary muscles worked:” followed by the muscles worked.
  
3. **Rest:**  
 - Provide instructions for a 1-minute rest period between circuits with active recovery suggestions (e.g., deep breathing, light stretching) and indicate the muscle groups relaxed.
  
4. **Cool-Down:**  
 - Provide a 5-minute cool-down routine including static or dynamic stretching.  
 - Include key stretches, mention the muscles targeted, and explain their recovery benefits.
  
For Sunday, provide a string for active recovery recommendations. For example:
"Rest Day: Take a 10-15 minute light walk, then perform a gentle yoga sequence, foam rolling, and dynamic stretching. Explain briefly how each aids recovery."

Return ONLY a valid JSON object in EXACTLY the following format, with no extra text or markdown:
{
  "Monday": {
    "warmUp": "Warm-Up:<br>Start with 1 minute of jumping jacks to warm up the legs and shoulders.<br>Follow with 1 minute of high knees to activate the core and improve circulation.<br>Perform 1 minute of arm circles to mobilize the shoulders and upper back.<br>Finish with 1 minute of leg swings to loosen the hamstrings and hip flexors.",
    "mainCircuit": "Main Circuit:<br><strong>Exercise 1: Bodyweight Squats</strong> - Perform for 30 seconds, focusing on proper form.<br><strong>Primary muscles worked:</strong> Quadriceps, Glutes.<br><br><strong>Exercise 2: Push-ups</strong> - Perform for 30 seconds, maintaining a straight body line.<br><strong>Primary muscles worked:</strong> Chest, Triceps, Shoulders.<br><br><strong>Exercise 3: TRX Rows</strong> - Perform for 30 seconds using the TRX, focusing on controlled movements.<br><strong>Primary muscles worked:</strong> Back, Biceps.",
    "rest": "Rest:<br>Rest for 1 minute between circuits.<br>Perform deep breathing and light stretching to relax the core and shoulders.",
    "coolDown": "Cool-Down:<br>Finish with 5 minutes of static stretching.<br>Focus on stretching the quadriceps, hamstrings, chest, and back to reduce muscle tension and improve flexibility."
  },
  "Tuesday": { "warmUp": "Warm-Up instructions for Tuesday<br>(detailed instructions...)", "mainCircuit": "Main Circuit instructions for Tuesday<br>(detailed instructions...)", "rest": "Rest instructions for Tuesday<br>(detailed instructions...)", "coolDown": "Cool-Down instructions for Tuesday<br>(detailed instructions...)" },
  "Wednesday": { "warmUp": "Warm-Up instructions for Wednesday<br>(detailed instructions...)", "mainCircuit": "Main Circuit instructions for Wednesday<br>(detailed instructions...)", "rest": "Rest instructions for Wednesday<br>(detailed instructions...)", "coolDown": "Cool-Down instructions for Wednesday<br>(detailed instructions...)" },
  "Thursday": { "warmUp": "Warm-Up instructions for Thursday<br>(detailed instructions...)", "mainCircuit": "Main Circuit instructions for Thursday<br>(detailed instructions...)", "rest": "Rest instructions for Thursday<br>(detailed instructions...)", "coolDown": "Cool-Down instructions for Thursday<br>(detailed instructions...)" },
  "Friday": { "warmUp": "Warm-Up instructions for Friday<br>(detailed instructions...)", "mainCircuit": "Main Circuit instructions for Friday<br>(detailed instructions...)", "rest": "Rest instructions for Friday<br>(detailed instructions...)", "coolDown": "Cool-Down instructions for Friday<br>(detailed instructions...)" },
  "Saturday": { "warmUp": "Warm-Up instructions for Saturday<br>(detailed instructions...)", "mainCircuit": "Main Circuit instructions for Saturday<br>(detailed instructions...)", "rest": "Rest instructions for Saturday<br>(detailed instructions...)", "coolDown": "Cool-Down instructions for Saturday<br>(detailed instructions...)" },
  "Sunday": "Rest Day: Take a 10-15 minute light walk, then perform a gentle yoga sequence, foam rolling, and dynamic stretching. Include brief explanations for how each activity aids recovery and improves flexibility."
}
OUTPUT_END`;

  console.log("Dynamic Workout Prompt Sent to OpenAI:", dynamicPrompt);

  try {
    const aiResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: dynamicPrompt }],
        temperature: 0.3,
        max_tokens: 2000,
        stop: ["OUTPUT_END"]
      })
    });
    const apiResult = await aiResponse.json();
    console.log("Raw API JSON Response:", JSON.stringify(apiResult, null, 2));
    if (!apiResult.choices || !apiResult.choices[0] || !apiResult.choices[0].message) {
      return res.status(500).json({ workout: null, error: "Unexpected API response format." });
    }
    if (apiResult.choices[0].finish_reason === "length") {
      console.warn("API response was truncated due to token limits.");
      return res.status(500).json({ workout: null, error: "Workout output truncated. Please try again with a shorter prompt." });
    }
    
    let workoutText = apiResult.choices[0].message.content.trim();
    console.log("Raw workoutText received:", workoutText);
    
    // Remove markdown code fences if present.
    if (workoutText.startsWith("```")) {
      workoutText = workoutText.replace(/^```(json)?\s*/i, "").replace(/\s*```$/, "").trim();
      console.log("WorkoutText after removing markdown delimiters:", workoutText);
    }
    
    // Trim extraneous text before and after the JSON block.
    const firstBrace = workoutText.indexOf("{");
    if (firstBrace > 0) {
      workoutText = workoutText.substring(firstBrace);
      console.log("WorkoutText after trimming extra text before JSON:", workoutText);
    }
    const lastBrace = workoutText.lastIndexOf("}");
    if (lastBrace < workoutText.length - 1) {
      workoutText = workoutText.substring(0, lastBrace + 1);
      console.log("WorkoutText after trimming extra text after JSON:", workoutText);
    }
    
    // Remove the OUTPUT_END marker if present.
    workoutText = workoutText.replace(/OUTPUT_END\s*$/i, "").trim();
    
    // Use regex to extract a JSON block.
    const jsonMatch = workoutText.match(/{[\s\S]*}/);
    if (!jsonMatch) {
      console.error("Regex failed to extract JSON. Full workoutText:", workoutText);
      return res.status(500).json({ workout: null, error: "Invalid workout format received from server." });
    }
    workoutText = jsonMatch[0];
    console.log("Extracted JSON using regex:", workoutText);
    
    // Cleanup: remove BOM, fix trailing commas, and balance braces.
    workoutText = workoutText.replace(/^\uFEFF/, "").trim();
    workoutText = workoutText.replace(/,(\s*})/g, "$1");
    if (workoutText.slice(-1) !== "}") {
      workoutText += "}";
      console.log("Appended missing closing brace. New workoutText:", workoutText);
    }
    workoutText = balanceBraces(workoutText);
    console.log("Cleaned workoutText after balancing, first 50 chars:", workoutText.slice(0, 50), "...", "last 50 chars:", workoutText.slice(-50));
    
    let workoutPlan;
    try {
      workoutPlan = JSON.parse(workoutText);
      console.log("Parsed workoutPlan object:", workoutPlan);
    } catch (e) {
      console.error("Error parsing workout JSON:", e);
      return res.status(500).json({ workout: null, error: "Invalid workout format received from server." });
    }
    
    // Build an HTML table to display the 7-day workout plan.
    let tableRows = "";
    const dayNames = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
    dayNames.forEach(day => {
      let dayContent = "";
      if (workoutPlan[day] && typeof workoutPlan[day] === "object") {
        dayContent += workoutPlan[day].warmUp + "<br><br>";
        dayContent += workoutPlan[day].mainCircuit + "<br><br>";
        dayContent += workoutPlan[day].rest + "<br><br>";
        dayContent += workoutPlan[day].coolDown;
      } else if (workoutPlan[day]) {
        dayContent = workoutPlan[day];
      } else {
        dayContent = "No workout data.";
      }
      tableRows += `<tr>
        <td style="padding:8px; border:1px solid #ccc;">${day}</td>
        <td style="padding:8px; border:1px solid #ccc;">${dayContent}</td>
      </tr>`;
    });
    
    // Updated header and footer with CSS classes.
    const tableHTML = compressHTML(`
      <div class="workout-heading">Your 7-day Workout Plan for Weight Loss</div>
      <table style="width:100%; border-collapse: collapse;">
        <thead>
          <tr>
            <th style="padding:8px; border:1px solid #ccc;">Day</th>
            <th style="padding:8px; border:1px solid #ccc;">Plan</th>
          </tr>
        </thead>
        <tbody>
          ${tableRows}
        </tbody>
      </table>
      <div class="workout-footer">Good luck!</div>
      <div style="text-align:center; margin:20px 0;">
        <button id="generateMealPlan" class="meal-plan-btn">Generate Meal Plan</button>
      </div>
    `);
    console.log("Final HTML being sent to the client:", tableHTML);
    
    // Build the extra guidance block only once.
    let extraGuidance = `<div class="extra-guidance">`;
    extraGuidance += `<p><strong>Workout Tip:</strong> For maximum benefit, perform the main circuit <strong>2 times</strong>. Beginners can start with one circuit and progress gradually.</p>`;
    let typeLower = userProfileData.workoutType.toLowerCase();
    if (typeLower === "home" || typeLower === "bodyweight") {
      extraGuidance += `<p><strong>Home/Bodyweight Workouts:</strong> This plan is designed as a Tabata-style, time-based workout. Focus on intensity and correct form using your bodyweight or available equipment.</p>`;
    } else if (typeLower === "gym") {
      extraGuidance += `<p><strong>Gym Workouts:</strong> This plan is based on reps and sets. Start with lighter weights, focus on proper form, and progress safely.</p>`;
    }
    if (userProfileData.timeCommitment) {
      let commitment = userProfileData.timeCommitment;
      extraGuidance += `<p><strong>Session Duration & Frequency:</strong> You selected ${commitment}. `;
      if (commitment.includes("10-20")) {
        extraGuidance += `We recommend 4-5 high-intensity sessions per week.`;
      } else if (commitment.includes("20-30")) {
        extraGuidance += `Aim for around 4 sessions per week.`;
      } else if (commitment.includes("30-45")) {
        extraGuidance += `This is ideal for a balanced workout—3 to 4 sessions per week should yield good progress.`;
      } else if (commitment.includes("45-60")) {
        extraGuidance += `With this ample time, 3 focused sessions per week can deliver excellent results.`;
      }
      extraGuidance += `</p>`;
    }
    if (userProfileData.fitnessLevel) {
      let level = userProfileData.fitnessLevel.toLowerCase();
      if (level === "beginner") {
        extraGuidance += `<p><strong>Intensity:</strong> As a beginner, expect moderate intensity to safely build your foundation. Increase effort gradually.</p>`;
      } else if (level === "intermediate") {
        extraGuidance += `<p><strong>Intensity:</strong> Your workouts will be moderately challenging. You can push a bit harder as you build consistency.</p>`;
      } else if (level === "advanced") {
        extraGuidance += `<p><strong>Intensity:</strong> High intensity is incorporated to push your limits while emphasizing proper form to avoid injury.</p>`;
      }
    }
    if (userProfileData.equipment && userProfileData.equipment.length > 0) {
      extraGuidance += `<p><strong>Equipment Note:</strong> You selected: ${userProfileData.equipment.join(", ")}. Use these tools to further customize your routine.</p>`;
    } else {
      extraGuidance += `<p><strong>Home Workout Advantage:</strong> This plan emphasizes effective bodyweight exercises that require no additional equipment.</p>`;
    }
    if (userProfileData.fitnessGoal) {
      extraGuidance += `<p><strong>Your Goal:</strong> This plan is tailored to help you ${userProfileData.fitnessGoal}. Consistency and safety are key to progress.</p>`;
    }
    extraGuidance += `</div>`;
    
    // Prepend the extra guidance block above the table.
    res.json({ workout: extraGuidance + tableHTML, error: null });
  } catch (error) {
    console.error("Error Fetching Workout Plan:", error);
    res.status(500).json({ workout: null, error: "Failed to generate workout. Server-side error." });
  }
});

module.exports = router;
